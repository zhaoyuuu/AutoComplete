{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u7CFB\\u7EDF\\u9ED8\\u8BA4\\\\\\u684C\\u9762\\\\shenzhenyunlian\\\\src\\\\component\\\\AutoComplete\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './index.css'; // props 接口\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\r\n * AutoComplete组件\r\n * @param props \r\n */\nexport default function AutoComplete(props) {\n  _s();\n\n  const valueRef = useRef(null); // 下拉列表是否展示\n\n  let [isShow, setIsShow] = useState(false); // input中的内容\n\n  const [value, setValue] = useState(''); // 筛选出下拉列表中包含输入字符的部分\n\n  const [filterOptions, setFilter] = useState([]);\n  const {\n    placeholder,\n    options,\n    notFoundContent,\n    style,\n    debounceDelay,\n    dropdownClassname\n  } = props;\n  useEffect(() => {\n    valueRef.current = value;\n  }, [value]);\n  useEffect(() => {\n    setTimeout(() => {\n      const liList = document.querySelectorAll('.li'); // 实现高亮效果\n\n      if (filterOptions.length) {\n        // for(let i=0; i<filterOptions.length; i++) {\n        //   // 把str中的char替换成span\n        //   let highlightened = filterOptions[i].replace(\n        //     new RegExp(value, 'g'),\n        //     `<span style='color:red'>${value}</span>`\n        //     )\n        //   liList[i].innerHTML = highlightened\n        // }\n        console.log(liList[0], filterOptions); // 匹配关键词\n\n        console.log('关键词', value);\n        let transformString = value.replace(/[.[*?+^$|()/]|\\]|\\\\/g, '\\\\$&');\n        let pattern = new RegExp(transformString, 'i'); // 这里不区分大小写\n\n        for (let i = 0; i < liList.length; i++) {\n          highlightKeyword(liList[i], pattern);\n        }\n      }\n    });\n  }, [filterOptions]);\n  /**\r\n   *  高亮关键字\r\n   * @param node - 节点\r\n   * @param pattern - 用于匹配的正则表达式\r\n   */\n  // 文本节点的ts类型是啥？\n\n  const highlightKeyword = (node, pattern) => {\n    // nodeType等于3表示是文本节点\n    if (node.nodeType === 3) {\n      // node.data为文本节点的文本内容\n      var matchResult = node.data.match(pattern); // 有匹配上的话\n\n      if (matchResult) {\n        // 创建一个span节点，用来包裹住匹配到的关键词内容\n        let highlightEl = document.createElement('span'); // 不用类名来控制高亮，用自定义属性data-*来标识，\n        // 比用类名更减少概率与原本内容重名，避免样式覆盖\n\n        highlightEl.dataset.highlight = 'yes'; // 从匹配到的初始位置开始截断到原本节点末尾，产生新的文本节点\n\n        let matchNode = node.splitText(matchResult.index); // 从新的文本节点中再次截断，按照匹配到的关键词的长度开始截断，\n        // 此时0-length之间的文本作为matchNode的文本内容\n\n        matchNode.splitText(matchResult[0].length); // 对matchNode这个文本节点的内容（即匹配到的关键词内容）创建出一个新的文本节点出来\n\n        let highlightTextNode = document.createTextNode(matchNode.data); // 插入到创建的span节点中\n\n        highlightEl.appendChild(highlightTextNode); // 把原本matchNode这个节点替换成用于标记高亮的span节点\n\n        matchNode.parentNode.replaceChild(highlightEl, matchNode);\n      }\n    } // 如果是元素节点 且 不是script、style元素 且 不是已经标记过高亮的元素\n    // 至于要区分什么元素里的内容不是你想要高亮的，可自己补充，这里的script和style是最基础的了\n    // 不是已经标记过高亮的元素作为条件之一的理由是，避免进入死循环，一直往里套span标签\n    // else if ((node.nodeType === 1)  && !(/script|style/.test(node.tagName.toLowerCase())) && (node.dataset.highlight !== 'yes')) {\n    //     // 遍历该节点的所有子孙节点，找出文本节点进行高亮标记\n    //     var childNodes = node.childNodes;\n    //     for (var i = 0; i < childNodes.length; i++) {\n    //         highlightKeyword(childNodes[i], pattern);\n    //     }\n    // }\n\n  }; // 防抖中要触发的事件\n\n\n  const event = () => {\n    console.log('event');\n    setTimeout(() => {\n      // 获取最新的value值\n      let _value = valueRef.current;\n      let filterArr = [];\n\n      if (_value) {\n        setFilter([]);\n        options.forEach(str => {\n          // 如果str以input里的值开头\n          if (str.startsWith(_value)) {\n            filterArr.push(str);\n          }\n        });\n        setFilter(filterArr);\n        setIsShow(true);\n      } else {\n        setIsShow(false);\n      }\n    });\n  }; // debounce 防抖  ### 失败！！！###\n\n\n  function debounce(delay, event) {\n    // ts里定时器相关：https://blog.csdn.net/ollin2012/article/details/88963553\n    let timer = null;\n    return function () {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n\n      timer = window.setTimeout(() => {\n        event();\n      }, delay);\n    };\n  } // focus时\n\n\n  const onFocus = () => {\n    if (value) {\n      setIsShow(true);\n    }\n  }; // blur时\n\n\n  const onBlur = () => {\n    setTimeout(() => {\n      // if(isBlur) {\n      setIsShow(false); // setBlur(true)\n      // }\n    }, 100);\n  }; // change时\n\n\n  const onChange = e => {\n    setValue(e.currentTarget.value);\n    debounce(debounceDelay, event)();\n  }; // 当下拉列表被点击时\n\n\n  const selectValue = e => {\n    // 将li的数据填到input里\n    console.log(e.target.innerHTML);\n    setValue(e.target.innerHTML.innerText); // 页面更新后\n\n    setTimeout(() => {\n      // 获取最新的value值\n      let _value = valueRef.current;\n      console.log('当前input：', _value);\n      let filterArr = [];\n      setFilter([]);\n      options.forEach(str => {\n        for (let char of _value) {\n          // 判断options中是否包含输入的字符\n          if (str.indexOf(char) >= 0 && !filterArr.includes(str)) {\n            filterArr.push(str);\n            setFilter(filterArr);\n          }\n        }\n      });\n    }, 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"auto-complete\",\n      value: value,\n      placeholder: placeholder,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: onChange,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), isShow ? filterOptions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: `dropdown ${dropdownClassname}`,\n      children: filterOptions.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"li\",\n          onClick: selectValue,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 38\n    }, this) : notFoundContent : null, /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: filterOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AutoComplete, \"gU/oW3uITObXLXCTFaZ9mifQmi0=\");\n\n_c = AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AutoComplete","props","valueRef","isShow","setIsShow","value","setValue","filterOptions","setFilter","placeholder","options","notFoundContent","style","debounceDelay","dropdownClassname","current","setTimeout","liList","document","querySelectorAll","length","console","log","transformString","replace","pattern","RegExp","i","highlightKeyword","node","nodeType","matchResult","data","match","highlightEl","createElement","dataset","highlight","matchNode","splitText","index","highlightTextNode","createTextNode","appendChild","parentNode","replaceChild","event","_value","filterArr","forEach","str","startsWith","push","debounce","delay","timer","window","clearTimeout","onFocus","onBlur","onChange","e","currentTarget","selectValue","target","innerHTML","innerText","char","indexOf","includes","map","item"],"sources":["D:/系统默认/桌面/shenzhenyunlian/src/component/AutoComplete/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, CSSProperties } from 'react'\r\nimport './index.css'\r\n\r\n// props 接口\r\ninterface IProps {\r\n  placeholder: string,\r\n  options: Array<any>,\r\n  notFoundContent: React.ReactNode,\r\n  style: CSSProperties,\r\n  debounceDelay: number,\r\n  dropdownClassname: string\r\n}\r\n\r\n/**\r\n * AutoComplete组件\r\n * @param props \r\n */\r\nexport default function AutoComplete(props: IProps) {\r\n\r\n  const valueRef = useRef<any>(null)\r\n  // 下拉列表是否展示\r\n  let [isShow, setIsShow] = useState<boolean>(false)\r\n  // input中的内容\r\n  const [value, setValue] = useState<string>('')\r\n  // 筛选出下拉列表中包含输入字符的部分\r\n  const [filterOptions, setFilter] = useState<Array<string>>([])\r\n  \r\n\r\n  const {placeholder, options, notFoundContent, style, debounceDelay, dropdownClassname} = props\r\n\r\n  useEffect(()=>{\r\n    valueRef.current = value\r\n  }, [value])\r\n\r\n  useEffect(()=>{\r\n    setTimeout(() => {\r\n      const liList = document.querySelectorAll('.li')\r\n      // 实现高亮效果\r\n      if(filterOptions.length){\r\n        // for(let i=0; i<filterOptions.length; i++) {\r\n        //   // 把str中的char替换成span\r\n        //   let highlightened = filterOptions[i].replace(\r\n        //     new RegExp(value, 'g'),\r\n        //     `<span style='color:red'>${value}</span>`\r\n        //     )\r\n        //   liList[i].innerHTML = highlightened\r\n        // }\r\n        console.log(liList[0], filterOptions);\r\n        // 匹配关键词\r\n        console.log('关键词',value);\r\n        let transformString = value.replace(/[.[*?+^$|()/]|\\]|\\\\/g, '\\\\$&');\r\n        let pattern = new RegExp(transformString, 'i'); // 这里不区分大小写\r\n        for(let i=0; i<liList.length; i++) {\r\n          highlightKeyword(liList[i], pattern)\r\n        }\r\n      }\r\n    });\r\n  }, [filterOptions])\r\n\r\n  /**\r\n   *  高亮关键字\r\n   * @param node - 节点\r\n   * @param pattern - 用于匹配的正则表达式\r\n   */\r\n  // 文本节点的ts类型是啥？\r\n  type IHighlight = (node: any, pattern: RegExp) => void\r\n  const highlightKeyword: IHighlight = (node, pattern) => {\r\n    // nodeType等于3表示是文本节点\r\n    if (node.nodeType === 3) {\r\n        // node.data为文本节点的文本内容\r\n        var matchResult = node.data.match(pattern);\r\n        // 有匹配上的话\r\n        if (matchResult) {\r\n            // 创建一个span节点，用来包裹住匹配到的关键词内容\r\n            let highlightEl = document.createElement('span');\r\n            // 不用类名来控制高亮，用自定义属性data-*来标识，\r\n            // 比用类名更减少概率与原本内容重名，避免样式覆盖\r\n            highlightEl.dataset.highlight = 'yes';\r\n            // 从匹配到的初始位置开始截断到原本节点末尾，产生新的文本节点\r\n            let matchNode = node.splitText(matchResult.index);\r\n            // 从新的文本节点中再次截断，按照匹配到的关键词的长度开始截断，\r\n            // 此时0-length之间的文本作为matchNode的文本内容\r\n            matchNode.splitText(matchResult[0].length);\r\n            // 对matchNode这个文本节点的内容（即匹配到的关键词内容）创建出一个新的文本节点出来\r\n            let highlightTextNode = document.createTextNode(matchNode.data);\r\n            // 插入到创建的span节点中\r\n            highlightEl.appendChild(highlightTextNode);\r\n            // 把原本matchNode这个节点替换成用于标记高亮的span节点\r\n            matchNode.parentNode.replaceChild(highlightEl, matchNode);\r\n        }\r\n    } \r\n    // 如果是元素节点 且 不是script、style元素 且 不是已经标记过高亮的元素\r\n    // 至于要区分什么元素里的内容不是你想要高亮的，可自己补充，这里的script和style是最基础的了\r\n    // 不是已经标记过高亮的元素作为条件之一的理由是，避免进入死循环，一直往里套span标签\r\n    // else if ((node.nodeType === 1)  && !(/script|style/.test(node.tagName.toLowerCase())) && (node.dataset.highlight !== 'yes')) {\r\n    //     // 遍历该节点的所有子孙节点，找出文本节点进行高亮标记\r\n    //     var childNodes = node.childNodes;\r\n    //     for (var i = 0; i < childNodes.length; i++) {\r\n    //         highlightKeyword(childNodes[i], pattern);\r\n    //     }\r\n    // }\r\n  }\r\n\r\n  // 防抖中要触发的事件\r\n  type Event = () => void\r\n  const event: Event = ()=>{\r\n    console.log('event');\r\n    setTimeout(() => {\r\n      // 获取最新的value值\r\n      let _value = valueRef.current\r\n      let filterArr: Array<string> = []\r\n      if(_value){\r\n        setFilter([])\r\n        options.forEach(str => {\r\n          // 如果str以input里的值开头\r\n          if(str.startsWith(_value)){\r\n            filterArr.push(str)\r\n          }\r\n        })\r\n        setFilter(filterArr)\r\n        setIsShow(true)\r\n      } else {\r\n        setIsShow(false)\r\n      }\r\n    });\r\n  }\r\n  // debounce 防抖  ### 失败！！！###\r\n  function debounce(delay: number, event: Event) {\r\n    // ts里定时器相关：https://blog.csdn.net/ollin2012/article/details/88963553\r\n    let timer:number | null = null\r\n    return function () {\r\n      if(timer) {\r\n        window.clearTimeout(timer as number);\r\n      }\r\n      timer = window.setTimeout(() => {\r\n        event()\r\n      }, delay);\r\n    }\r\n  }\r\n\r\n  // focus时\r\n  const onFocus = () => {\r\n    if(value){\r\n      \r\n      setIsShow(true)\r\n    }\r\n  }\r\n  // blur时\r\n  const onBlur = () => {\r\n    setTimeout(() => {\r\n      // if(isBlur) {\r\n        setIsShow(false)\r\n        // setBlur(true)\r\n      // }\r\n    }, 100);\r\n  }\r\n  // change时\r\n  const onChange = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    setValue(e.currentTarget.value)\r\n    debounce(debounceDelay, event)()\r\n  }\r\n  // 当下拉列表被点击时\r\n  const selectValue = (e:any) => {\r\n    // 将li的数据填到input里\r\n    console.log(e.target.innerHTML);\r\n    \r\n    setValue(e.target.innerHTML.innerText)\r\n\r\n    // 页面更新后\r\n    setTimeout(() => {\r\n      // 获取最新的value值\r\n      let _value = valueRef.current\r\n      console.log('当前input：', _value);\r\n\r\n      let filterArr: Array<string> = []\r\n      setFilter([])\r\n      options.forEach(str => {\r\n        for(let char of _value){\r\n          // 判断options中是否包含输入的字符\r\n          if(str.indexOf(char)>=0 && !filterArr.includes(str)){\r\n            filterArr.push(str)\r\n            setFilter(filterArr)\r\n          }\r\n        }\r\n      })\r\n    }, 1);\r\n      \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input \r\n        type=\"text\" className=\"auto-complete\" value={value}\r\n        placeholder={placeholder} onFocus={onFocus} \r\n        onBlur={onBlur} onChange={onChange} style={style}\r\n      />\r\n      {\r\n        isShow ? \r\n          (filterOptions.length>0 ? (<ul className={`dropdown ${dropdownClassname}`}>\r\n            {\r\n              filterOptions.map((item,index) => {\r\n                return <li className='li' key={index} onClick={selectValue}>\r\n                  {item}\r\n                </li>\r\n              })\r\n            }\r\n          </ul>) : notFoundContent) : null\r\n      }\r\n      <h2>{filterOptions}</h2>\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}