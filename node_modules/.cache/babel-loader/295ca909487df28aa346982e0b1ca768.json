{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u7CFB\\u7EDF\\u9ED8\\u8BA4\\\\\\u684C\\u9762\\\\shenzhenyunlian\\\\src\\\\component\\\\AutoComplete\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport './index.css'; // props 接口\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\r\n * AutoComplete组件\r\n * @param props \r\n */\nexport default function AutoComplete(props) {\n  _s();\n\n  useEffect(() => {\n    valueRef.current = value;\n    optionRef.current = filterOptions;\n  });\n  const valueRef = useRef(null);\n  const optionRef = useRef(null); // 下拉列表是否展示\n\n  let [isShow, setIsShow] = useState(false); // input中的内容\n\n  const [value, setValue] = useState(''); // onblur点击的元素是否是下拉列表\n\n  const [isList, setIsList] = useState(false); // 筛选出下拉列表中包含输入字符的部分\n\n  const [filterOptions, setFilter] = useState([]);\n  const {\n    placeholder,\n    options\n  } = props; // focus时\n\n  const onFocus = () => {\n    if (value) {\n      setIsShow(true);\n    }\n  }; // blur时\n\n\n  const onBlur = () => {\n    setTimeout(() => {\n      setIsShow(false);\n      setIsList(false);\n    }, 100);\n  }; // change时\n\n\n  const onChange = e => {\n    setValue(e.target.value);\n    setTimeout(() => {\n      // 获取最新的value值\n      let _value = valueRef.current;\n      let _filterOptions = optionRef.current; // 由_value值判断是否需要展示下拉列表\n      // let filterArr: Array<string> = []\n\n      if (_value) {\n        setFilter([]);\n        options.forEach(str => {\n          for (let char of _value) {\n            if (str.indexOf(char) >= 0) {\n              setFilter([str]);\n            }\n          }\n        });\n        setIsShow(true);\n      } else {\n        setIsShow(false);\n      }\n    });\n  }; // 当下拉列表被点击时\n\n\n  const selectValue = e => {\n    // 更新isList\n    setIsList(true); // 将li的数据填到input里\n\n    setValue(e.target.innerHTML);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"auto-complete\",\n      value: value,\n      placeholder: placeholder,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), isShow ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"dropdown\",\n      children: options.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"li\",\n          onClick: selectValue,\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AutoComplete, \"jhIEScrhcAAi9aDfynutScWzP0M=\");\n\n_c = AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"names":["useState","useEffect","useRef","AutoComplete","props","valueRef","current","value","optionRef","filterOptions","isShow","setIsShow","setValue","isList","setIsList","setFilter","placeholder","options","onFocus","onBlur","setTimeout","onChange","e","target","_value","_filterOptions","forEach","str","char","indexOf","selectValue","innerHTML","map","item","index"],"sources":["D:/系统默认/桌面/shenzhenyunlian/src/component/AutoComplete/index.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\r\nimport './index.css'\r\n\r\n// props 接口\r\ninterface IProps {\r\n  placeholder: string,\r\n  options: Array<any>\r\n}\r\n\r\n/**\r\n * AutoComplete组件\r\n * @param props \r\n */\r\nexport default function AutoComplete(props: IProps) {\r\n\r\n  useEffect(()=>{\r\n    valueRef.current = value\r\n    optionRef.current = filterOptions\r\n  })\r\n\r\n  const valueRef: any = useRef(null)\r\n  const optionRef: any = useRef(null)\r\n  // 下拉列表是否展示\r\n  let [isShow, setIsShow] = useState(false)\r\n  // input中的内容\r\n  const [value, setValue] = useState('')\r\n  // onblur点击的元素是否是下拉列表\r\n  const [isList, setIsList] = useState(false)\r\n  // 筛选出下拉列表中包含输入字符的部分\r\n  const [filterOptions, setFilter] = useState<Array<string>>([])\r\n\r\n  const {placeholder, options} = props\r\n\r\n\r\n  // focus时\r\n  const onFocus = () => {\r\n    if(value){\r\n      setIsShow(true)\r\n    }\r\n  }\r\n  // blur时\r\n  const onBlur = () => {\r\n    setTimeout(() => {\r\n      setIsShow(false)\r\n      setIsList(false)\r\n    }, 100);\r\n    \r\n    \r\n  }\r\n  // change时\r\n  const onChange = (e: any) => {\r\n    setValue(e.target.value)\r\n    setTimeout(() => {\r\n      // 获取最新的value值\r\n      let _value = valueRef.current\r\n      let _filterOptions = optionRef.current\r\n      // 由_value值判断是否需要展示下拉列表\r\n      // let filterArr: Array<string> = []\r\n      if(_value){\r\n        setFilter([])\r\n        options.forEach(str => {\r\n          for(let char of _value){\r\n            if(str.indexOf(char)>=0){\r\n              setFilter([ str])\r\n            }\r\n          }\r\n        })\r\n        \r\n        setIsShow(true)\r\n      } else {\r\n        setIsShow(false)\r\n      }\r\n    });\r\n    \r\n  }\r\n  // 当下拉列表被点击时\r\n  const selectValue = (e:any) => {\r\n    // 更新isList\r\n    setIsList(true)\r\n    \r\n    // 将li的数据填到input里\r\n    setValue(e.target.innerHTML)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input \r\n        type=\"text\" className=\"auto-complete\" value={value}\r\n        placeholder={placeholder} onFocus={onFocus} \r\n        onBlur={onBlur} onChange={onChange}\r\n      />\r\n      {\r\n        isShow ? \r\n          (<ul className='dropdown'>\r\n            {\r\n              options.map((item,index) => {\r\n                return <li className='li' key={index} onClick={selectValue}>\r\n                  {value}\r\n                </li>\r\n              })\r\n            }\r\n          </ul>) : null\r\n      }\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}