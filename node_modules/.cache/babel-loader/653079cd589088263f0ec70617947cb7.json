{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u7CFB\\u7EDF\\u9ED8\\u8BA4\\\\\\u684C\\u9762\\\\shenzhenyunlian\\\\src\\\\component\\\\AutoComplete\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './index.css'; // props 接口\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\r\n * AutoComplete组件\r\n * @param props \r\n */\nexport default function AutoComplete(props) {\n  _s();\n\n  const valueRef = useRef(null); // 下拉列表是否展示\n\n  let [isShow, setIsShow] = useState(false); // input中的内容\n\n  const [value, setValue] = useState(''); // 筛选出下拉列表中包含输入字符的部分\n\n  const [filterOptions, setFilter] = useState([]); // blur flag\n  // const [isBlur, setBlur] = useState(true)\n\n  const {\n    placeholder,\n    options,\n    notFoundContent,\n    style,\n    debounceDelay,\n    dropdownClassname\n  } = props;\n  useEffect(() => {\n    valueRef.current = value;\n    const liList = document.querySelectorAll('.li'); // 实现高亮效果\n\n    for (let i = 0; i < filterOptions.length; i++) {\n      for (let char of valueRef.current) {\n        // 把str中的char替换成span\n        filterOptions[i] = filterOptions[i].replace(new RegExp(char, 'g'), '<span>@</span>' // '###'\n        );\n      }\n    }\n\n    console.log(liList, filterOptions);\n  }, [value]); // 防抖中要触发的事件\n\n  const event = () => {\n    console.log('event');\n    setTimeout(() => {\n      // 获取最新的value值\n      let _value = valueRef.current;\n      let filterArr = [];\n\n      if (_value) {\n        setFilter([]);\n        options.forEach(str => {\n          for (let char of _value) {\n            // 判断options中是否包含输入的字符\n            if (str.indexOf(char) >= 0 && !filterArr.includes(str)) {\n              filterArr.push(str);\n            }\n          }\n        }); // 实现高亮效果\n        // for(let i=0; i<filterArr.length; i++) {\n        //   for(let char of _value){\n        //     // 把str中的char替换成span\n        //     filterArr[i] = filterArr[i].replace(\n        //       new RegExp(char, 'g'),\n        //       '<span>$&</span>'\n        //       // '###'\n        //       )\n        //   }\n        // }\n        // console.log(filterArr);\n\n        setFilter(filterArr);\n        setIsShow(true);\n      } else {\n        setIsShow(false);\n      }\n    });\n  }; // debounce 防抖  ### 失败！！！###\n\n\n  function debounce(delay, event) {\n    // ts里定时器相关：https://blog.csdn.net/ollin2012/article/details/88963553\n    let timer = null;\n    return function () {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n\n      timer = window.setTimeout(() => {\n        event();\n      }, delay);\n    };\n  } // focus时\n\n\n  const onFocus = () => {\n    if (value) {\n      setIsShow(true);\n    }\n  }; // blur时\n\n\n  const onBlur = () => {\n    setTimeout(() => {\n      // if(isBlur) {\n      setIsShow(false); // setBlur(true)\n      // }\n    }, 100);\n  }; // change时\n\n\n  const onChange = e => {\n    setValue(e.currentTarget.value);\n    debounce(debounceDelay, event)();\n  }; // 当下拉列表被点击时\n\n\n  const selectValue = e => {\n    // 将li的数据填到input里\n    setValue(e.target.innerHTML); // 页面更新后\n\n    setTimeout(() => {\n      // 获取最新的value值\n      let _value = valueRef.current;\n      console.log('当前input：', _value);\n      let filterArr = [];\n      setFilter([]);\n      options.forEach(str => {\n        for (let char of _value) {\n          // 判断options中是否包含输入的字符\n          if (str.indexOf(char) >= 0 && !filterArr.includes(str)) {\n            filterArr.push(str);\n            setFilter(filterArr);\n          }\n        }\n      });\n    }, 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"auto-complete\",\n      value: value,\n      placeholder: placeholder,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: onChange,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), isShow ? filterOptions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: `dropdown ${dropdownClassname}`,\n      children: filterOptions.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"li\",\n          onClick: selectValue,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 38\n    }, this) : notFoundContent : null, /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: filterOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AutoComplete, \"rLVKn91giSwAJ72K+4Vg4T2Fkw4=\");\n\n_c = AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AutoComplete","props","valueRef","isShow","setIsShow","value","setValue","filterOptions","setFilter","placeholder","options","notFoundContent","style","debounceDelay","dropdownClassname","current","liList","document","querySelectorAll","i","length","char","replace","RegExp","console","log","event","setTimeout","_value","filterArr","forEach","str","indexOf","includes","push","debounce","delay","timer","window","clearTimeout","onFocus","onBlur","onChange","e","currentTarget","selectValue","target","innerHTML","map","item","index"],"sources":["D:/系统默认/桌面/shenzhenyunlian/src/component/AutoComplete/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, CSSProperties } from 'react'\r\nimport './index.css'\r\n\r\n// props 接口\r\ninterface IProps {\r\n  placeholder: string,\r\n  options: Array<any>,\r\n  notFoundContent: React.ReactNode,\r\n  style: CSSProperties,\r\n  debounceDelay: number,\r\n  dropdownClassname: string\r\n}\r\n\r\n/**\r\n * AutoComplete组件\r\n * @param props \r\n */\r\nexport default function AutoComplete(props: IProps) {\r\n\r\n  const valueRef = useRef<any>(null)\r\n  // 下拉列表是否展示\r\n  let [isShow, setIsShow] = useState<boolean>(false)\r\n  // input中的内容\r\n  const [value, setValue] = useState<string>('')\r\n  // 筛选出下拉列表中包含输入字符的部分\r\n  const [filterOptions, setFilter] = useState<Array<string>>([])\r\n  // blur flag\r\n  // const [isBlur, setBlur] = useState(true)\r\n\r\n  const {placeholder, options, notFoundContent, style, debounceDelay, dropdownClassname} = props\r\n\r\n  useEffect(()=>{\r\n    valueRef.current = value\r\n    const liList = document.querySelectorAll('.li')\r\n    // 实现高亮效果\r\n    for(let i=0; i<filterOptions.length; i++) {\r\n      for(let char of valueRef.current){\r\n        // 把str中的char替换成span\r\n        filterOptions[i] = filterOptions[i].replace(\r\n          new RegExp(char, 'g'),\r\n          '<span>@</span>'\r\n          // '###'\r\n          )\r\n      }\r\n    }\r\n    console.log(liList, filterOptions);\r\n    \r\n  }, [value])\r\n\r\n  // 防抖中要触发的事件\r\n  type Event = () => void\r\n  const event: Event = ()=>{\r\n    console.log('event');\r\n    setTimeout(() => {\r\n      // 获取最新的value值\r\n      let _value = valueRef.current\r\n      let filterArr: Array<string> = []\r\n      if(_value){\r\n        setFilter([])\r\n        options.forEach(str => {\r\n          for(let char of _value){\r\n            // 判断options中是否包含输入的字符\r\n            if(str.indexOf(char)>=0 && !filterArr.includes(str)){\r\n              filterArr.push(str)\r\n            }\r\n          }\r\n        })\r\n        // 实现高亮效果\r\n        // for(let i=0; i<filterArr.length; i++) {\r\n        //   for(let char of _value){\r\n        //     // 把str中的char替换成span\r\n        //     filterArr[i] = filterArr[i].replace(\r\n        //       new RegExp(char, 'g'),\r\n        //       '<span>$&</span>'\r\n        //       // '###'\r\n        //       )\r\n        //   }\r\n        // }\r\n        // console.log(filterArr);\r\n        \r\n        setFilter(filterArr)\r\n        setIsShow(true)\r\n      } else {\r\n        setIsShow(false)\r\n      }\r\n    });\r\n  }\r\n  // debounce 防抖  ### 失败！！！###\r\n  function debounce(delay: number, event: Event) {\r\n    // ts里定时器相关：https://blog.csdn.net/ollin2012/article/details/88963553\r\n    let timer:number | null = null\r\n    return function () {\r\n      if(timer) {\r\n        window.clearTimeout(timer as number);\r\n      }\r\n      timer = window.setTimeout(() => {\r\n        event()\r\n      }, delay);\r\n    }\r\n  }\r\n\r\n\r\n  // focus时\r\n  const onFocus = () => {\r\n    if(value){\r\n      setIsShow(true)\r\n    }\r\n  }\r\n  // blur时\r\n  const onBlur = () => {\r\n    setTimeout(() => {\r\n      // if(isBlur) {\r\n        setIsShow(false)\r\n        // setBlur(true)\r\n      // }\r\n    }, 100);\r\n  }\r\n  // change时\r\n  const onChange = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    setValue(e.currentTarget.value)\r\n    debounce(debounceDelay, event)()\r\n  }\r\n  // 当下拉列表被点击时\r\n  const selectValue = (e:any) => {\r\n    // 将li的数据填到input里\r\n    setValue(e.target.innerHTML)\r\n\r\n    // 页面更新后\r\n    setTimeout(() => {\r\n      // 获取最新的value值\r\n      let _value = valueRef.current\r\n      console.log('当前input：', _value);\r\n\r\n      let filterArr: Array<string> = []\r\n      setFilter([])\r\n      options.forEach(str => {\r\n        for(let char of _value){\r\n          // 判断options中是否包含输入的字符\r\n          if(str.indexOf(char)>=0 && !filterArr.includes(str)){\r\n            filterArr.push(str)\r\n            setFilter(filterArr)\r\n          }\r\n        }\r\n      })\r\n    }, 1);\r\n      \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input \r\n        type=\"text\" className=\"auto-complete\" value={value}\r\n        placeholder={placeholder} onFocus={onFocus} \r\n        onBlur={onBlur} onChange={onChange} style={style}\r\n      />\r\n      {\r\n        isShow ? \r\n          (filterOptions.length>0 ? (<ul className={`dropdown ${dropdownClassname}`}>\r\n            {\r\n              filterOptions.map((item,index) => {\r\n                return <li className='li' key={index} onClick={selectValue}>\r\n                  {item}\r\n                </li>\r\n              })\r\n            }\r\n          </ul>) : notFoundContent) : null\r\n      }\r\n      <h2>{filterOptions}</h2>\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}