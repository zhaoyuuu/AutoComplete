{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u7CFB\\u7EDF\\u9ED8\\u8BA4\\\\\\u684C\\u9762\\\\shenzhenyunlian\\\\src\\\\component\\\\AutoComplete\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './index.css'; // props 接口\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\r\n * AutoComplete组件\r\n * @param props \r\n */\nexport default function AutoComplete(props) {\n  _s();\n\n  const valueRef = useRef(null); // 下拉列表是否展示\n\n  let [isShow, setIsShow] = useState(false); // input中的内容\n\n  const [value, setValue] = useState(''); // 筛选出下拉列表中包含输入字符的部分\n\n  const [filterOptions, setFilter] = useState([]); // blur flag\n  // const [isBlur, setBlur] = useState(true)\n\n  const {\n    placeholder,\n    options,\n    notFoundContent,\n    style,\n    debounceDelay\n  } = props;\n  useEffect(() => {\n    valueRef.current = value;\n  }, [value]); // debounce\n\n  function debounce(delay) {\n    // ts里定时器相关：https://blog.csdn.net/ollin2012/article/details/88963553\n    // let timer:NodeJS.Timeout | null = null\n    // return function () {\n    //   clearTimeout(Number(timer))\n    //   timer = setTimeout(() => {\n    console.log(12122); //   }, delay);\n    // }\n  } // focus时\n\n\n  const onFocus = () => {\n    if (value) {\n      setIsShow(true);\n    }\n  }; // blur时\n\n\n  const onBlur = () => {\n    setTimeout(() => {\n      // if(isBlur) {\n      setIsShow(false); // setBlur(true)\n      // }\n    }, 100);\n  }; // change时\n\n\n  const onChange = e => {\n    setValue(e.currentTarget.value);\n    debounce(debounceDelay);\n    setTimeout(() => {\n      // 获取最新的value值\n      let _value = valueRef.current;\n      let filterArr = [];\n\n      if (_value) {\n        setFilter([]);\n        options.forEach(str => {\n          for (let char of _value) {\n            // 判断options中是否包含输入的字符\n            if (str.indexOf(char) >= 0 && !filterArr.includes(str)) {\n              filterArr.push(str);\n              setFilter(filterArr);\n            }\n          }\n        });\n        setIsShow(true);\n      } else {\n        setIsShow(false);\n      }\n    });\n  }; // 当下拉列表被点击时\n\n\n  const selectValue = e => {\n    // 将li的数据填到input里\n    setValue(e.target.innerHTML); // 页面更新后\n\n    setTimeout(() => {\n      // 获取最新的value值\n      let _value = valueRef.current;\n      console.log('当前input：', _value);\n      let filterArr = [];\n      setFilter([]);\n      options.forEach(str => {\n        for (let char of _value) {\n          // 判断options中是否包含输入的字符\n          if (str.indexOf(char) >= 0 && !filterArr.includes(str)) {\n            filterArr.push(str);\n            setFilter(filterArr);\n          }\n        }\n      });\n    }, 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"auto-complete\",\n      value: value,\n      placeholder: placeholder,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: onChange,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), isShow ? filterOptions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"dropdown\",\n      children: filterOptions.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"li\",\n          onClick: selectValue,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 38\n    }, this) : notFoundContent : null, /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: filterOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AutoComplete, \"rLVKn91giSwAJ72K+4Vg4T2Fkw4=\");\n\n_c = AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"names":["React","useState","useEffect","useRef","AutoComplete","props","valueRef","isShow","setIsShow","value","setValue","filterOptions","setFilter","placeholder","options","notFoundContent","style","debounceDelay","current","debounce","delay","console","log","onFocus","onBlur","setTimeout","onChange","e","currentTarget","_value","filterArr","forEach","str","char","indexOf","includes","push","selectValue","target","innerHTML","length","map","item","index"],"sources":["D:/系统默认/桌面/shenzhenyunlian/src/component/AutoComplete/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef, CSSProperties } from 'react'\r\nimport './index.css'\r\n\r\n// props 接口\r\ninterface IProps {\r\n  placeholder: string,\r\n  options: Array<any>,\r\n  notFoundContent: React.ReactNode,\r\n  style: CSSProperties,\r\n  debounceDelay: number\r\n}\r\n\r\n/**\r\n * AutoComplete组件\r\n * @param props \r\n */\r\nexport default function AutoComplete(props: IProps) {\r\n\r\n  const valueRef = useRef<any>(null)\r\n  // 下拉列表是否展示\r\n  let [isShow, setIsShow] = useState<boolean>(false)\r\n  // input中的内容\r\n  const [value, setValue] = useState<string>('')\r\n  // 筛选出下拉列表中包含输入字符的部分\r\n  const [filterOptions, setFilter] = useState<Array<string>>([])\r\n  // blur flag\r\n  // const [isBlur, setBlur] = useState(true)\r\n\r\n  const {placeholder, options, notFoundContent, style, debounceDelay} = props\r\n\r\n  useEffect(()=>{\r\n    valueRef.current = value\r\n  }, [value])\r\n\r\n  // debounce\r\n  function debounce(delay: number) {\r\n    // ts里定时器相关：https://blog.csdn.net/ollin2012/article/details/88963553\r\n    // let timer:NodeJS.Timeout | null = null\r\n    // return function () {\r\n    //   clearTimeout(Number(timer))\r\n    //   timer = setTimeout(() => {\r\n        console.log(12122);\r\n    //   }, delay);\r\n    // }\r\n  }\r\n\r\n  // focus时\r\n  const onFocus = () => {\r\n    if(value){\r\n      setIsShow(true)\r\n    }\r\n  }\r\n  // blur时\r\n  const onBlur = () => {\r\n    setTimeout(() => {\r\n      // if(isBlur) {\r\n        setIsShow(false)\r\n        // setBlur(true)\r\n      // }\r\n    }, 100);\r\n  }\r\n  // change时\r\n  const onChange = (e: React.FormEvent<HTMLInputElement>): void => {\r\n    setValue(e.currentTarget.value)\r\n    debounce(debounceDelay)\r\n    setTimeout(() => {\r\n      // 获取最新的value值\r\n      let _value = valueRef.current\r\n      let filterArr: Array<string> = []\r\n      if(_value){\r\n        setFilter([])\r\n        options.forEach(str => {\r\n          for(let char of _value){\r\n            // 判断options中是否包含输入的字符\r\n            if(str.indexOf(char)>=0 && !filterArr.includes(str)){\r\n              filterArr.push(str)\r\n              setFilter(filterArr)\r\n            }\r\n          }\r\n        })\r\n        setIsShow(true)\r\n      } else {\r\n        setIsShow(false)\r\n      }\r\n    });\r\n  }\r\n  // 当下拉列表被点击时\r\n  const selectValue = (e:any) => {\r\n    // 将li的数据填到input里\r\n    setValue(e.target.innerHTML)\r\n\r\n    // 页面更新后\r\n    setTimeout(() => {\r\n      // 获取最新的value值\r\n      let _value = valueRef.current\r\n      console.log('当前input：', _value);\r\n\r\n      let filterArr: Array<string> = []\r\n      setFilter([])\r\n      options.forEach(str => {\r\n        for(let char of _value){\r\n          // 判断options中是否包含输入的字符\r\n          if(str.indexOf(char)>=0 && !filterArr.includes(str)){\r\n            filterArr.push(str)\r\n            setFilter(filterArr)\r\n          }\r\n        }\r\n      })\r\n    }, 1);\r\n      \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input \r\n        type=\"text\" className=\"auto-complete\" value={value}\r\n        placeholder={placeholder} onFocus={onFocus} \r\n        onBlur={onBlur} onChange={onChange} style={style}\r\n      />\r\n      {\r\n        isShow ? \r\n          (filterOptions.length>0 ? (<ul className='dropdown'>\r\n            {\r\n              filterOptions.map((item,index) => {\r\n                return <li className='li' key={index} onClick={selectValue}>\r\n                  {item}\r\n                </li>\r\n              })\r\n            }\r\n          </ul>) : notFoundContent) : null\r\n      }\r\n      <h2>{filterOptions}</h2>\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}