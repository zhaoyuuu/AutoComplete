{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u7CFB\\u7EDF\\u9ED8\\u8BA4\\\\\\u684C\\u9762\\\\shenzhenyunlian\\\\src\\\\component\\\\AutoComplete\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport './index.css'; // props 接口\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\r\n * AutoComplete组件\r\n * @param props \r\n */\nexport default function AutoComplete(props) {\n  _s();\n\n  const valueRef = useRef(null); // const optionRef: any = useRef(null)\n  // 下拉列表是否展示\n\n  let [isShow, setIsShow] = useState(false); // input中的内容\n\n  const [value, setValue] = useState(''); // 筛选出下拉列表中包含输入字符的部分\n\n  const [filterOptions, setFilter] = useState([]);\n  const {\n    placeholder,\n    options,\n    notFoundContent\n  } = props;\n  useEffect(() => {\n    valueRef.current = value; // optionRef.current = filterOptions\n  }, [value]); // focus时\n\n  const onFocus = () => {\n    if (value) {\n      setIsShow(true);\n    }\n  }; // blur时\n\n\n  const onBlur = () => {\n    setTimeout(() => {\n      setIsShow(false);\n    }, 100);\n  }; // change时\n\n\n  const onChange = e => {\n    setValue(e.target.value);\n    setTimeout(() => {\n      // 获取最新的value值\n      let _value = valueRef.current;\n      let filterArr = [];\n\n      if (_value) {\n        setFilter([]);\n        options.forEach(str => {\n          for (let char of _value) {\n            // 判断options中是否包含输入的字符\n            if (str.indexOf(char) >= 0 && !filterArr.includes(str)) {\n              filterArr.push(str);\n              setFilter(filterArr);\n            }\n          }\n        });\n        setIsShow(true);\n      } else {\n        setIsShow(false);\n      }\n    });\n  }; // 当下拉列表被点击时\n\n\n  const selectValue = e => {\n    // 将li的数据填到input里\n    setValue(e.target.innerHTML);\n    setTimeout(() => {\n      // 获取最新的value值\n      let _value = valueRef.current;\n      console.log('当前input：', _value);\n      let filterArr = [];\n      setFilter([]);\n      options.forEach(str => {\n        for (let char of _value) {\n          // 判断options中是否包含输入的字符\n          if (str.indexOf(char) >= 0 && !filterArr.includes(str)) {\n            filterArr.push(str);\n            setFilter(filterArr);\n          }\n        }\n      });\n    }, 100);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"auto-complete\",\n      value: value,\n      placeholder: placeholder,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), isShow ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"dropdown\",\n      children: filterOptions.length > 0 ? filterOptions.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"li\",\n          onClick: selectValue,\n          children: item\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 24\n        }, this);\n      }) : notFoundContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 12\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: filterOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AutoComplete, \"CQnV5i586jWbaWs8AZI/si9awrk=\");\n\n_c = AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"names":["useState","useEffect","useRef","AutoComplete","props","valueRef","isShow","setIsShow","value","setValue","filterOptions","setFilter","placeholder","options","notFoundContent","current","onFocus","onBlur","setTimeout","onChange","e","target","_value","filterArr","forEach","str","char","indexOf","includes","push","selectValue","innerHTML","console","log","length","map","item","index"],"sources":["D:/系统默认/桌面/shenzhenyunlian/src/component/AutoComplete/index.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\r\nimport './index.css'\r\n\r\n// props 接口\r\ninterface IProps {\r\n  placeholder: string,\r\n  options: Array<any>,\r\n  notFoundContent: React.ReactNode\r\n}\r\n\r\n/**\r\n * AutoComplete组件\r\n * @param props \r\n */\r\nexport default function AutoComplete(props: IProps) {\r\n\r\n  const valueRef: any = useRef(null)\r\n  // const optionRef: any = useRef(null)\r\n  // 下拉列表是否展示\r\n  let [isShow, setIsShow] = useState(false)\r\n  // input中的内容\r\n  const [value, setValue] = useState('')\r\n  // 筛选出下拉列表中包含输入字符的部分\r\n  const [filterOptions, setFilter] = useState<Array<string>>([])\r\n\r\n  const {placeholder, options, notFoundContent} = props\r\n\r\n  useEffect(()=>{\r\n    valueRef.current = value\r\n    // optionRef.current = filterOptions\r\n  }, [value])\r\n\r\n\r\n\r\n  // focus时\r\n  const onFocus = () => {\r\n    if(value){\r\n      setIsShow(true)\r\n    }\r\n  }\r\n  // blur时\r\n  const onBlur = () => {\r\n    setTimeout(() => {\r\n      setIsShow(false)\r\n    }, 100);\r\n  }\r\n  // change时\r\n  const onChange = (e: any) => {\r\n    setValue(e.target.value)\r\n    setTimeout(() => {\r\n      // 获取最新的value值\r\n      let _value = valueRef.current\r\n      let filterArr: Array<string> = []\r\n      if(_value){\r\n        setFilter([])\r\n        options.forEach(str => {\r\n          for(let char of _value){\r\n            // 判断options中是否包含输入的字符\r\n            if(str.indexOf(char)>=0 && !filterArr.includes(str)){\r\n              filterArr.push(str)\r\n              setFilter(filterArr)\r\n            }\r\n          }\r\n        })\r\n        setIsShow(true)\r\n      } else {\r\n        setIsShow(false)\r\n      }\r\n    });\r\n    \r\n  }\r\n  // 当下拉列表被点击时\r\n  const selectValue = (e:any) => {\r\n    // 将li的数据填到input里\r\n    setValue(e.target.innerHTML)\r\n    setTimeout(() => {\r\n      // 获取最新的value值\r\n      let _value = valueRef.current\r\n      console.log('当前input：', _value);\r\n\r\n      let filterArr: Array<string> = []\r\n      setFilter([])\r\n      options.forEach(str => {\r\n        for(let char of _value){\r\n          // 判断options中是否包含输入的字符\r\n          if(str.indexOf(char)>=0 && !filterArr.includes(str)){\r\n            filterArr.push(str)\r\n            setFilter(filterArr)\r\n          }\r\n        }\r\n      })\r\n    }, 100);\r\n      \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input \r\n        type=\"text\" className=\"auto-complete\" value={value}\r\n        placeholder={placeholder} onFocus={onFocus} \r\n        onBlur={onBlur} onChange={onChange}\r\n      />\r\n      {\r\n        isShow ? \r\n          (<ul className='dropdown'>\r\n            {\r\n              filterOptions.length>0 ? filterOptions.map((item,index) => {\r\n                return <li className='li' key={index} onClick={selectValue}>\r\n                  {item}\r\n                </li>\r\n              }) : notFoundContent\r\n            }\r\n          </ul>) : null\r\n      }\r\n      <h2>{filterOptions}</h2>\r\n    </div>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}