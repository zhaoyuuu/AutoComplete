{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u7CFB\\u7EDF\\u9ED8\\u8BA4\\\\\\u684C\\u9762\\\\shenzhenyunlian\\\\src\\\\component\\\\AutoComplete\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport './index.css'; // props 接口\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mockVal = function (str) {\n  let repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  return str.repeat(repeat);\n}; // AutoComplete组件\n\n\nexport default function AutoComplete(props) {\n  _s();\n\n  useEffect(() => {\n    valueRef.current = value;\n  });\n  const valueRef = useRef(null); // 下拉列表是否展示\n\n  let [isShow, setIsShow] = useState(false); // input中的内容\n\n  const [value, setValue] = useState(''); // onblur点击的元素是否是下拉列表\n\n  const [isList, setIsList] = useState(false);\n  const {\n    placeholder,\n    options\n  } = props; // focus时\n\n  const onFocus = () => {\n    if (value) {\n      setIsShow(true);\n    }\n  }; // blur时\n\n\n  const onBlur = () => {\n    setTimeout(() => {\n      setIsShow(false);\n      setIsList(false);\n    }, 100);\n  }; // change\n\n\n  const onChange = e => {\n    setValue(e.target.value);\n    setTimeout(() => {\n      let _value = valueRef.current;\n      console.log('_value: ', _value);\n\n      if (_value) {\n        setIsShow(true);\n      }\n    });\n  }; // 当下拉列表被点击\n\n\n  const selectValue = e => {\n    // 更新isList\n    setIsList(true); // 将li的数据填到input里\n\n    setValue(e.target.innerHTML);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"auto-complete\",\n      value: value,\n      placeholder: placeholder,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), isShow ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"dropdown\",\n      children: options.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"li\",\n          onClick: selectValue,\n          children: mockVal(value, index + 1)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 24\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AutoComplete, \"Pkkw304GcKsf6VtKCAhDQcw4Bs0=\");\n\n_c = AutoComplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoComplete\");","map":{"version":3,"names":["useState","useEffect","useRef","mockVal","str","repeat","AutoComplete","props","valueRef","current","value","isShow","setIsShow","setValue","isList","setIsList","placeholder","options","onFocus","onBlur","setTimeout","onChange","e","target","_value","console","log","selectValue","innerHTML","map","item","index"],"sources":["D:/系统默认/桌面/shenzhenyunlian/src/component/AutoComplete/index.tsx"],"sourcesContent":["import { useState, useEffect, useRef } from 'react'\r\nimport './index.css'\r\n\r\n// props 接口\r\ninterface IProps {\r\n  placeholder: string,\r\n  options: Array<any>\r\n}\r\n// 模拟下拉列表的提示数据\r\ntype MockVal  = (a: string, b: number) => string\r\nconst mockVal: MockVal = (str, repeat = 1) => {\r\n  return str.repeat(repeat)\r\n}\r\n\r\n// AutoComplete组件\r\nexport default function AutoComplete(props: IProps) {\r\n\r\n  useEffect(()=>{\r\n    valueRef.current = value\r\n  })\r\n\r\n  const valueRef: any = useRef(null)\r\n  // 下拉列表是否展示\r\n  let [isShow, setIsShow] = useState(false)\r\n  // input中的内容\r\n  const [value, setValue] = useState('')\r\n  // onblur点击的元素是否是下拉列表\r\n  const [isList, setIsList] = useState(false)\r\n\r\n  const {placeholder, options} = props\r\n\r\n  // focus时\r\n  const onFocus = () => {\r\n    if(value){\r\n      setIsShow(true)\r\n    }\r\n  }\r\n  // blur时\r\n  const onBlur = () => {\r\n    setTimeout(() => {\r\n      setIsShow(false)\r\n      setIsList(false)\r\n    }, 100);\r\n    \r\n    \r\n  }\r\n  // change\r\n  const onChange = (e: any) => {\r\n    setValue(e.target.value)\r\n    setTimeout(() => {\r\n      \r\n      let _value = valueRef.current\r\n      console.log('_value: ', _value);\r\n      if(_value){\r\n        setIsShow(true)\r\n      }\r\n    });\r\n    \r\n  }\r\n  // 当下拉列表被点击\r\n  const selectValue = (e:any) => {\r\n    // 更新isList\r\n    setIsList(true)\r\n    \r\n    // 将li的数据填到input里\r\n    setValue(e.target.innerHTML)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <input \r\n        type=\"text\" className=\"auto-complete\" value={value}\r\n        placeholder={placeholder} onFocus={onFocus} \r\n        onBlur={onBlur} onChange={onChange}\r\n      />\r\n      {\r\n        isShow ? \r\n          (<ul className='dropdown'>\r\n            {\r\n              options.map((item,index) => {\r\n                return <li className='li' key={index} onClick={selectValue}>\r\n                  {mockVal(value, index+1)}\r\n                </li>\r\n              })\r\n            }\r\n          </ul>) : null\r\n      }\r\n    </div>\r\n  );\r\n}"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAO,aAAP,C,CAEA;;;;AAOA,MAAMC,OAAgB,GAAG,UAACC,GAAD,EAAqB;EAAA,IAAfC,MAAe,uEAAN,CAAM;EAC5C,OAAOD,GAAG,CAACC,MAAJ,CAAWA,MAAX,CAAP;AACD,CAFD,C,CAIA;;;AACA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAAqC;EAAA;;EAElDN,SAAS,CAAC,MAAI;IACZO,QAAQ,CAACC,OAAT,GAAmBC,KAAnB;EACD,CAFQ,CAAT;EAIA,MAAMF,QAAa,GAAGN,MAAM,CAAC,IAAD,CAA5B,CANkD,CAOlD;;EACA,IAAI,CAACS,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,KAAD,CAAlC,CARkD,CASlD;;EACA,MAAM,CAACU,KAAD,EAAQG,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC,CAVkD,CAWlD;;EACA,MAAM,CAACc,MAAD,EAASC,SAAT,IAAsBf,QAAQ,CAAC,KAAD,CAApC;EAEA,MAAM;IAACgB,WAAD;IAAcC;EAAd,IAAyBV,KAA/B,CAdkD,CAgBlD;;EACA,MAAMW,OAAO,GAAG,MAAM;IACpB,IAAGR,KAAH,EAAS;MACPE,SAAS,CAAC,IAAD,CAAT;IACD;EACF,CAJD,CAjBkD,CAsBlD;;;EACA,MAAMO,MAAM,GAAG,MAAM;IACnBC,UAAU,CAAC,MAAM;MACfR,SAAS,CAAC,KAAD,CAAT;MACAG,SAAS,CAAC,KAAD,CAAT;IACD,CAHS,EAGP,GAHO,CAAV;EAMD,CAPD,CAvBkD,CA+BlD;;;EACA,MAAMM,QAAQ,GAAIC,CAAD,IAAY;IAC3BT,QAAQ,CAACS,CAAC,CAACC,MAAF,CAASb,KAAV,CAAR;IACAU,UAAU,CAAC,MAAM;MAEf,IAAII,MAAM,GAAGhB,QAAQ,CAACC,OAAtB;MACAgB,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,MAAxB;;MACA,IAAGA,MAAH,EAAU;QACRZ,SAAS,CAAC,IAAD,CAAT;MACD;IACF,CAPS,CAAV;EASD,CAXD,CAhCkD,CA4ClD;;;EACA,MAAMe,WAAW,GAAIL,CAAD,IAAW;IAC7B;IACAP,SAAS,CAAC,IAAD,CAAT,CAF6B,CAI7B;;IACAF,QAAQ,CAACS,CAAC,CAACC,MAAF,CAASK,SAAV,CAAR;EACD,CAND;;EAQA,oBACE;IAAA,wBACE;MACE,IAAI,EAAC,MADP;MACc,SAAS,EAAC,eADxB;MACwC,KAAK,EAAElB,KAD/C;MAEE,WAAW,EAAEM,WAFf;MAE4B,OAAO,EAAEE,OAFrC;MAGE,MAAM,EAAEC,MAHV;MAGkB,QAAQ,EAAEE;IAH5B;MAAA;MAAA;MAAA;IAAA,QADF,EAOIV,MAAM,gBACH;MAAI,SAAS,EAAC,UAAd;MAAA,UAEGM,OAAO,CAACY,GAAR,CAAY,CAACC,IAAD,EAAMC,KAAN,KAAgB;QAC1B,oBAAO;UAAI,SAAS,EAAC,IAAd;UAA+B,OAAO,EAAEJ,WAAxC;UAAA,UACJxB,OAAO,CAACO,KAAD,EAAQqB,KAAK,GAAC,CAAd;QADH,GAAwBA,KAAxB;UAAA;UAAA;UAAA;QAAA,QAAP;MAGD,CAJD;IAFH;MAAA;MAAA;MAAA;IAAA,QADG,GASK,IAhBf;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD;;GA1EuBzB,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}